package Easy;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;

public class AddTowNumbers {
	public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		Queue<Integer> st1 = new LinkedList<Integer>();
		Queue<Integer> st2 = new Queue<>();
		while (l1 != null) {
			st1.add(l1.val);
			l1 = l1.next;
		}
		while (l2 != null) {
			st2.add(l2.val);
			l2 = l2.next;
		}

		ListNode rs = new ListNode((st1.peek() + st2.peek()) % 10);
		int soDu = (st1.pop() + st2.pop()) / 10;
		ListNode current = rs;

		while (st1.size() != 0 || st2.size() != 0) {
			int n1 = st1.size() == 0 ? 0 : st1.pop();
			int n2 = st2.size() == 0 ? 0 : st2.pop();
			current.next = new ListNode((n1 + n2 + soDu) % 10);
			soDu = (n1 + n2 + soDu) / 10;
			current = current.next;
		}

		if (soDu > 0)
			current.next = new ListNode(soDu);

		return rs;

	}

	public static void main(String[] args) {
		int[] arr1 = new int[] { 2, 4, 9 };
		int[] arr2 = new int[] { 5, 6, 4, 9 };
		
		ListNode a = new ListNode(arr1[0]);
		ListNode a1 = a;
		for(int i = 1; i < arr1.length; i++) {
			a1.next = new ListNode(arr1[i]);
			a1 = a1.next;
		}
		ListNode b = new ListNode(arr2[0]);
		ListNode b1 = b;
		for(int i = 1; i < arr2.length; i++) {
			b1.next = new ListNode(arr2[i]);
			b1 = b1.next;
		}

		ListNode rs = addTwoNumbers(a, b);
		while (rs != null) {
			System.out.println(rs.val);
			rs = rs.next;
		}
	}
}
